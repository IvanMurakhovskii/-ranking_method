{"version":3,"sources":["modules/fill-table-form/fill-table.tsx","modules/preference-table/preference-table.tsx","pages/PreferenceTablePage.tsx","modules/ranking/ranking.tsx","pages/RankingPage.tsx","App.tsx","index.tsx"],"names":["formItemLayout","labelCol","xs","span","sm","wrapperCol","formItemLayoutWithOutLabel","offset","FillTableSizeForm","history","useHistory","style","display","justify","flex","title","width","name","onFinish","expertsCount","names","localStorage","setItem","JSON","stringify","push","Item","label","required","rules","type","min","message","List","validator","_","a","length","Promise","reject","Error","fields","add","remove","errors","map","field","index","key","validateTrigger","whitespace","noStyle","placeholder","MinusCircleOutlined","className","onClick","icon","PlusOutlined","ErrorList","htmlType","PreferenceTable","props","onButtonClick","state","board","expertsCountValue","getItem","parse","namesValue","console","log","makeGrid","this","setState","coordinate","value","Object","assign","x","y","gutter","Text","disabled","row","i","preference","j","onChange","updateBoard","marginTop","Component","components","experts","grid","withRouter","PreferenceTablePage","Ranking","componentSum","ranks","r","reduce","b","componentsNumber","sorted","slice","sort","v","indexOf","boardValue","componentsCount","newBoard","createBoard","createCompomentsSum","newRanks","createRank","rank","el","RankingPage","App","basename","process","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.98f43b87.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Form, Input, Button, InputNumber, Card, Row, Col } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\ntype FormReturnValue = {\r\n    expertsCount: number\r\n    names: string[]\r\n}\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 6 },\r\n    },\r\n    wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 20 },\r\n    },\r\n};\r\nconst formItemLayoutWithOutLabel = {\r\n    wrapperCol: {\r\n        xs: { span: 24, offset: 0 },\r\n        sm: { span: 20, offset: 6 },\r\n    },\r\n};\r\n\r\n\r\nconst FillTableSizeForm = () => {\r\n\r\n    const history = useHistory();\r\n\r\n\r\n    const onFinish = ({ expertsCount, names }: FormReturnValue) => {\r\n\r\n        localStorage.setItem(\"expertsCount\", JSON.stringify(expertsCount));\r\n        localStorage.setItem(\"names\", JSON.stringify(names));\r\n\r\n        history.push(\"/preference\");\r\n    };\r\n\r\n    return (\r\n        <Row style={{ display: \"flex\" }} justify=\"center\">\r\n            <Col flex={2} span={18}>\r\n                <Card title=\"Начальные данные\" style={{ width: '100%' }}>\r\n                    <Form name=\"dynamic_form_item\" {...formItemLayoutWithOutLabel} onFinish={onFinish}>\r\n                        <Form.Item\r\n                            {...formItemLayout}\r\n                            label=\"Количество экспертов\"\r\n                            required={true}\r\n                            name={\"expertsCount\"} rules={[{ type: 'number', min: 0, message: \"Количество экспертов не может быть меньше 0\" }]}\r\n                        >\r\n                            <InputNumber style={{ width: '80%' }} />\r\n                        </Form.Item>\r\n                        <Form.List\r\n                            name=\"names\"\r\n                            rules={[\r\n                                {\r\n                                    validator: async (_, names) => {\r\n                                        if (!names || names.length < 2) {\r\n                                            return Promise.reject(new Error('Как минимум нужно ввести 2 компоненты!'));\r\n                                        }\r\n                                    },\r\n                                },\r\n                            ]}\r\n                        >\r\n                            {(fields, { add, remove }, { errors }) => (\r\n                                <>\r\n                                    {fields.map((field, index) => (\r\n                                        <Form.Item\r\n                                            {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\r\n                                            label={index === 0 ? 'Объекты исследования' : ''}\r\n                                            required={false}\r\n                                            key={field.key}\r\n                                        >\r\n                                            <Form.Item\r\n                                                {...field}\r\n                                                validateTrigger={['onChange', 'onBlur']}\r\n                                                rules={[\r\n                                                    {\r\n                                                        required: true,\r\n                                                        whitespace: true,\r\n                                                        message: \"Пожалуйста введите название объекта или удалить это поле!.\",\r\n                                                    },\r\n                                                ]}\r\n                                                noStyle\r\n                                            >\r\n                                                <Input placeholder=\"Название объекта исследования\" style={{ width: '80%' }} />\r\n                                            </Form.Item>\r\n                                            {fields.length > 1 ? (\r\n                                                <MinusCircleOutlined\r\n                                                    className=\"dynamic-delete-button\"\r\n                                                    onClick={() => remove(field.name)}\r\n                                                />\r\n                                            ) : null}\r\n                                        </Form.Item>\r\n                                    ))}\r\n                                    <Form.Item>\r\n                                        <Button\r\n                                            type=\"dashed\"\r\n                                            onClick={() => add()}\r\n                                            style={{ width: '60%' }}\r\n                                            icon={<PlusOutlined />}\r\n                                        >\r\n                                            Добавить обект исследования\r\n                                        </Button>\r\n                                        <Form.ErrorList errors={errors} />\r\n                                    </Form.Item>\r\n                                </>\r\n                            )}\r\n                        </Form.List>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Заполнить\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Card>\r\n            </Col>\r\n        </Row >\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default FillTableSizeForm;\r\n\r\n","import React, { Component } from 'react';\r\nimport { BoardType, Coordinate } from '../../types';\r\nimport { InputNumber, Row, Col, Typography, Input, Button } from 'antd';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\ntype State = {\r\n  board: BoardType;\r\n  expertsCount: number;\r\n  names: string[];\r\n}\r\n\r\nclass PreferenceTable extends Component<any, State> {\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      board: [],\r\n      expertsCount: 0,\r\n      names: [],\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const expertsCountValue = localStorage.getItem(\"expertsCount\");\r\n    const expertsCount: number = expertsCountValue === null ? 0 : JSON.parse(expertsCountValue);\r\n\r\n    const namesValue = localStorage.getItem(\"names\");\r\n    const names = namesValue === null ? [] : JSON.parse(namesValue);\r\n\r\n    console.log(names.length);\r\n\r\n    const board = makeGrid(names.length || 0, expertsCount);\r\n\r\n    console.log(board);\r\n\r\n    this.setState({\r\n      board,\r\n      expertsCount,\r\n      names\r\n    });\r\n  }\r\n\r\n  updateBoard(coordinate: Coordinate, value: number) {\r\n    let board = Object.assign(this.state.board);\r\n\r\n    board[coordinate.x][coordinate.y] = value;\r\n\r\n    this.setState(board);\r\n  }\r\n\r\n  onButtonClick = () => {\r\n    localStorage.setItem(\"board\", JSON.stringify(this.state.board));\r\n    this.props.history.push(\"/ranking\");\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <Row gutter={[8, 8]} justify=\"center\">\r\n          <Col>\r\n            <Typography.Text>Наименование</Typography.Text>\r\n            {this.state.names.map(name => (\r\n              <Row>\r\n                <Col>\r\n                  <Input value={name} disabled />\r\n                </Col>\r\n              </Row>\r\n            ))}\r\n          </Col>\r\n          <Col>\r\n            <Typography.Text>Предпочтения</Typography.Text>\r\n            {this.state.board.map((row, i) =>\r\n              <Row>\r\n                <Col key={i}>{row.map((preference, j) =>\r\n                  <InputNumber key={j} value={preference}\r\n                    onChange={(value: number) => { this.updateBoard({ x: i, y: j }, value); }} />\r\n                )}\r\n                </Col>\r\n              </Row>)}\r\n          </Col>\r\n        </Row>\r\n        <Row justify=\"center\" gutter={[8, 8]} style={{ marginTop: \"1rem\" }}>\r\n          <Col>\r\n            <Button onClick={this.onButtonClick} type=\"primary\">Рассчитать ранг</Button>\r\n          </Col>\r\n        </Row>\r\n\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport const makeGrid = (components: number, experts: number): BoardType => {\r\n  let grid = [];\r\n  for (var i = 0; i < components; i++) {\r\n    var row = [];\r\n    for (var j = 0; j < experts; j++) {\r\n      row.push(0);\r\n    }\r\n    grid.push(row);\r\n  }\r\n  return grid;\r\n};\r\n\r\nexport default withRouter(PreferenceTable);","import React from 'react';\r\nimport PreferenceTable from '../modules/preference-table/preference-table';\r\n\r\nexport const PreferenceTablePage = () => (<PreferenceTable />)","import React, { Component } from 'react';\r\nimport { BoardType, Coordinate } from '../../types';\r\nimport { InputNumber, List, Input, Typography, Row, Col } from 'antd';\r\n\r\ntype Props = {\r\n    board: BoardType,\r\n}\r\n\r\ntype State = {\r\n    board: BoardType,\r\n    names: string[],\r\n    componentSum: Array<number>\r\n    ranks: Array<number>\r\n}\r\n\r\nexport default class Ranking extends Component<{}, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            board: [],\r\n            names: [],\r\n            componentSum: [],\r\n            ranks: [],\r\n        }\r\n    }\r\n\r\n    createCompomentsSum(board: BoardType): number[] {\r\n        return board.map(r => r.reduce((a, b) => a + b));\r\n    }\r\n\r\n    createRank(componentSum: number[], componentsNumber: number) {\r\n\r\n        const sorted = Object.assign(componentSum.slice().sort(function (a, b) { return b - a }))\r\n        const ranks: Array<number> = componentSum.slice().map(function (v) {\r\n            return componentsNumber - sorted.indexOf(v)\r\n        });\r\n\r\n        return ranks;\r\n    }\r\n\r\n    componentDidMount() {\r\n        const boardValue = localStorage.getItem(\"board\");\r\n        const board: BoardType = boardValue === null ? 0 : JSON.parse(boardValue);\r\n\r\n        const namesValue = localStorage.getItem(\"names\");\r\n        const names: string[] = namesValue === null ? 0 : JSON.parse(namesValue);\r\n\r\n        const componentsCount: number = board.length;\r\n\r\n        const newBoard = createBoard(board, componentsCount);\r\n        const componentSum = this.createCompomentsSum(newBoard);\r\n        const newRanks = this.createRank(componentSum, names.length);\r\n\r\n        this.setState({ board: newBoard, names: names, componentSum: componentSum, ranks: newRanks });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row gutter={[8, 8]} justify=\"center\">\r\n                    <Col>\r\n                        <Typography.Text>Наименование</Typography.Text>\r\n                        {this.state.names.map(name => (\r\n                            <Row>\r\n                                <Col>\r\n                                    <Input value={name} disabled />\r\n                                </Col>\r\n                            </Row>\r\n                        ))}\r\n                    </Col>\r\n                    <Col>\r\n                        <Typography.Text>Вектор предпочтений</Typography.Text>\r\n                        {this.state.board.map((row, i) =>\r\n                            <Row>\r\n                                <Col key={i}>{row.map((preference, j) =>\r\n                                    <InputNumber key={j} value={preference} disabled />\r\n                                )}\r\n                                </Col>\r\n                            </Row>)}\r\n                    </Col>\r\n                    <Col>\r\n                        <Typography.Text>Сумма компонент</Typography.Text>\r\n                        {this.state.componentSum.map(name => (\r\n                            <Row>\r\n                                <Col>\r\n                                    <Input value={name} disabled />\r\n                                </Col>\r\n                            </Row>\r\n                        ))}\r\n                    </Col>\r\n                    <Col>\r\n                        <Typography.Text>Ранг</Typography.Text>\r\n                        {this.state.ranks.map(rank => (\r\n                            <Row>\r\n                                <Col>\r\n                                    <Input value={rank} disabled />\r\n                                </Col>\r\n                            </Row>\r\n                        ))}\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport const createBoard = (board: BoardType, componentsCount: number): BoardType => {\r\n    return board.map((row, i) => row.map(el => {\r\n        return (el - 1)\r\n    }));\r\n};\r\n","import React from 'react';\r\nimport Ranking from '../modules/ranking/ranking';\r\n\r\nexport const RankingPage = () => (<Ranking />)","import React, { FC } from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport FillTableSizeForm from './modules/fill-table-form/fill-table';\nimport { BrowserRouter, Route, Switch, HashRouter } from 'react-router-dom';\nimport { PreferenceTablePage } from './pages/PreferenceTablePage';\nimport { RankingPage } from './pages/RankingPage';\nimport Layout from 'antd/lib/layout/layout';\n\nconst App: FC = () => {\n   return (\n      <div>\n         <HashRouter basename={process.env.PUBLIC_URL}>\n            {/* <Route render={({ location }) => (\n               <Layout \n            )} >\n\n            </Route> */}\n            <Switch>\n               <Route exact path=\"/\" component={FillTableSizeForm} />\n               <Route exact path=\"/preference\" component={PreferenceTablePage} />\n               <Route exact path=\"/ranking\" component={RankingPage} />\n            </Switch>\n         </HashRouter>\n      </div>\n   );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}