{"version":3,"sources":["modules/fill-table-form/fill-table.tsx","App.tsx","index.tsx"],"names":["formItemLayout","labelCol","xs","span","sm","wrapperCol","formItemLayoutWithOutLabel","offset","FillTableSizeForm","history","useHistory","style","display","justify","flex","title","width","name","onFinish","expertsCount","names","localStorage","setItem","JSON","stringify","push","Item","label","required","rules","type","min","message","List","validator","_","a","length","Promise","reject","Error","fields","add","remove","errors","map","field","index","key","validateTrigger","whitespace","noStyle","placeholder","MinusCircleOutlined","className","onClick","icon","PlusOutlined","ErrorList","htmlType","App","ReactDOM","render","document","getElementById"],"mappings":"+VAUMA,EAAiB,CACnBC,SAAU,CACNC,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,IAEhBE,WAAY,CACRH,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,MAGdG,EAA6B,CAC/BD,WAAY,CACRH,GAAI,CAAEC,KAAM,GAAII,OAAQ,GACxBH,GAAI,CAAED,KAAM,GAAII,OAAQ,KAsGjBC,EAjGW,WAEtB,IAAMC,EAAUC,cAWhB,OACI,cAAC,IAAD,CAAKC,MAAO,CAAEC,QAAS,QAAUC,QAAQ,SAAzC,SACI,cAAC,IAAD,CAAKC,KAAM,EAAGX,KAAM,GAApB,SACI,cAAC,IAAD,CAAMY,MAAM,8FAAmBJ,MAAO,CAAEK,MAAO,QAA/C,SACI,eAAC,IAAD,yBAAMC,KAAK,qBAAwBX,GAAnC,IAA+DY,SAZ9D,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,aAAcC,EAA6B,EAA7BA,MAE9BC,aAAaC,QAAQ,eAAgBC,KAAKC,UAAUL,IACpDE,aAAaC,QAAQ,QAASC,KAAKC,UAAUJ,IAE7CX,EAAQgB,KAAK,gBAOD,UACI,cAAC,IAAKC,KAAN,2BACQ1B,GADR,IAEI2B,MAAM,sHACNC,UAAU,EACVX,KAAM,eAAgBY,MAAO,CAAC,CAAEC,KAAM,SAAUC,IAAK,EAAGC,QAAS,oOAJrE,SAMI,cAAC,IAAD,CAAarB,MAAO,CAAEK,MAAO,YAEjC,cAAC,IAAKiB,KAAN,CACIhB,KAAK,QACLY,MAAO,CACH,CACIK,UAAU,WAAD,4BAAE,WAAOC,EAAGf,GAAV,SAAAgB,EAAA,yDACFhB,KAASA,EAAMiB,OAAS,GADtB,yCAEIC,QAAQC,OAAO,IAAIC,MAAM,uMAF7B,2CAAF,qDAAC,KAJtB,SAYK,SAACC,EAAD,SAAWC,EAAX,EAAWA,IAAKC,EAAhB,EAAgBA,OAAYC,EAA5B,EAA4BA,OAA5B,OACG,qCACKH,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACR,wBAAC,IAAKrB,KAAN,2BACmB,IAAVqB,EAAc/C,EAAiBM,GADxC,IAEIqB,MAAiB,IAAVoB,EAAc,sHAAyB,GAC9CnB,UAAU,EACVoB,IAAKF,EAAME,MAEX,cAAC,IAAKtB,KAAN,2BACQoB,GADR,IAEIG,gBAAiB,CAAC,WAAY,UAC9BpB,MAAO,CACH,CACID,UAAU,EACVsB,YAAY,EACZlB,QAAS,oTAGjBmB,SAAO,EAVX,SAYI,cAAC,IAAD,CAAOC,YAAY,uKAAgCzC,MAAO,CAAEK,MAAO,YAEtEyB,EAAOJ,OAAS,EACb,cAACgB,EAAA,EAAD,CACIC,UAAU,wBACVC,QAAS,kBAAMZ,EAAOG,EAAM7B,SAEhC,SAGZ,eAAC,IAAKS,KAAN,WACI,cAAC,IAAD,CACII,KAAK,SACLyB,QAAS,kBAAMb,KACf/B,MAAO,CAAEK,MAAO,OAChBwC,KAAM,cAACC,EAAA,EAAD,IAJV,sKAQA,cAAC,IAAKC,UAAN,CAAgBd,OAAQA,aAKxC,cAAC,IAAKlB,KAAN,UACI,cAAC,IAAD,CAAQI,KAAK,UAAU6B,SAAS,SAAhC,iFCzFbC,EAfC,WACb,OACG,8BACG,cAAC,EAAD,OCNTC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7c90973a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Form, Input, Button, InputNumber, Card, Row, Col } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\ntype FormReturnValue = {\r\n    expertsCount: number\r\n    names: string[]\r\n}\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 6 },\r\n    },\r\n    wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 20 },\r\n    },\r\n};\r\nconst formItemLayoutWithOutLabel = {\r\n    wrapperCol: {\r\n        xs: { span: 24, offset: 0 },\r\n        sm: { span: 20, offset: 6 },\r\n    },\r\n};\r\n\r\n\r\nconst FillTableSizeForm = () => {\r\n\r\n    const history = useHistory();\r\n\r\n\r\n    const onFinish = ({ expertsCount, names }: FormReturnValue) => {\r\n\r\n        localStorage.setItem(\"expertsCount\", JSON.stringify(expertsCount));\r\n        localStorage.setItem(\"names\", JSON.stringify(names));\r\n\r\n        history.push(\"/preference\");\r\n    };\r\n\r\n    return (\r\n        <Row style={{ display: \"flex\" }} justify=\"center\">\r\n            <Col flex={2} span={18}>\r\n                <Card title=\"Начальные данные\" style={{ width: '100%' }}>\r\n                    <Form name=\"dynamic_form_item\" {...formItemLayoutWithOutLabel} onFinish={onFinish}>\r\n                        <Form.Item\r\n                            {...formItemLayout}\r\n                            label=\"Количество экспертов\"\r\n                            required={true}\r\n                            name={\"expertsCount\"} rules={[{ type: 'number', min: 0, message: \"Количество экспертов не может быть меньше 0\" }]}\r\n                        >\r\n                            <InputNumber style={{ width: '80%' }} />\r\n                        </Form.Item>\r\n                        <Form.List\r\n                            name=\"names\"\r\n                            rules={[\r\n                                {\r\n                                    validator: async (_, names) => {\r\n                                        if (!names || names.length < 2) {\r\n                                            return Promise.reject(new Error('Как минимум нужно ввести 2 компоненты!'));\r\n                                        }\r\n                                    },\r\n                                },\r\n                            ]}\r\n                        >\r\n                            {(fields, { add, remove }, { errors }) => (\r\n                                <>\r\n                                    {fields.map((field, index) => (\r\n                                        <Form.Item\r\n                                            {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\r\n                                            label={index === 0 ? 'Объекты исследования' : ''}\r\n                                            required={false}\r\n                                            key={field.key}\r\n                                        >\r\n                                            <Form.Item\r\n                                                {...field}\r\n                                                validateTrigger={['onChange', 'onBlur']}\r\n                                                rules={[\r\n                                                    {\r\n                                                        required: true,\r\n                                                        whitespace: true,\r\n                                                        message: \"Пожалуйста введите название объекта или удалить это поле!.\",\r\n                                                    },\r\n                                                ]}\r\n                                                noStyle\r\n                                            >\r\n                                                <Input placeholder=\"Название объекта исследования\" style={{ width: '80%' }} />\r\n                                            </Form.Item>\r\n                                            {fields.length > 1 ? (\r\n                                                <MinusCircleOutlined\r\n                                                    className=\"dynamic-delete-button\"\r\n                                                    onClick={() => remove(field.name)}\r\n                                                />\r\n                                            ) : null}\r\n                                        </Form.Item>\r\n                                    ))}\r\n                                    <Form.Item>\r\n                                        <Button\r\n                                            type=\"dashed\"\r\n                                            onClick={() => add()}\r\n                                            style={{ width: '60%' }}\r\n                                            icon={<PlusOutlined />}\r\n                                        >\r\n                                            Добавить обект исследования\r\n                                        </Button>\r\n                                        <Form.ErrorList errors={errors} />\r\n                                    </Form.Item>\r\n                                </>\r\n                            )}\r\n                        </Form.List>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Заполнить\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Card>\r\n            </Col>\r\n        </Row >\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default FillTableSizeForm;\r\n\r\n","import React, { FC } from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport FillTableSizeForm from './modules/fill-table-form/fill-table';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { PreferenceTablePage } from './pages/PreferenceTablePage';\nimport { RankingPage } from './pages/RankingPage';\n\nconst App: FC = () => {\n   return (\n      <div>\n         <FillTableSizeForm />\n         {/* <BrowserRouter>\n            <Switch>\n               <Route exact path=\"/\" component={FillTableSizeForm} />\n               <Route exact path=\"/preference\" component={PreferenceTablePage} />\n               <Route exact path=\"/ranking\" component={RankingPage} />\n            </Switch>\n         </BrowserRouter> */}\n      </div>\n   );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}